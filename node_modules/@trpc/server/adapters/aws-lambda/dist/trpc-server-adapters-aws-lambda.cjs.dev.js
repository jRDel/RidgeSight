'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var url = require('url');
require('../../../dist/router-2f54c292.cjs.dev.js');
require('events');
require('http');
require('../../../dist/nodeHTTPRequestHandler-36ddaba2.cjs.dev.js');
var resolveHTTPResponse = require('../../../dist/resolveHTTPResponse-55b2c9bd.cjs.dev.js');
require('../../../dist/transformTRPCResponse-c654ea92.cjs.dev.js');
require('../../../dist/codes-130e62df.cjs.dev.js');

function lambdaEventToHTTPRequest(event) {
  const query = new url.URLSearchParams();

  for (const [key, value] of Object.entries((_event$multiValueQuer = event.multiValueQueryStringParameters) !== null && _event$multiValueQuer !== void 0 ? _event$multiValueQuer : {})) {
    var _event$multiValueQuer;

    for (const v of value !== null && value !== void 0 ? value : []) {
      query.append(key, v);
    }
  }

  return {
    method: event.httpMethod,
    query,
    headers: event.headers,
    body: event.body
  };
}

function transformHeaders(headers) {
  const obj = {};

  for (const [key, value] of Object.entries(headers)) {
    if (typeof value === 'undefined') {
      continue;
    }

    obj[key] = Array.isArray(value) ? value.join(', ') : value;
  }

  return obj;
}

function createApiGatewayHandler(opts) {
  return async (event, context) => {
    var _response$body, _response$headers;

    const req = lambdaEventToHTTPRequest(event);
    const path = event.path;

    const createContext = async function _createContext() {
      var _opts$createContext;

      return await ((_opts$createContext = opts.createContext) === null || _opts$createContext === void 0 ? void 0 : _opts$createContext.call(opts, {
        event,
        context
      }));
    };

    const response = await resolveHTTPResponse.resolveHTTPResponse({
      router: opts.router,
      batching: opts.batching,
      responseMeta: opts === null || opts === void 0 ? void 0 : opts.responseMeta,
      createContext,
      req,
      path,
      error: null,

      onError(o) {
        var _opts$onError;

        opts === null || opts === void 0 ? void 0 : (_opts$onError = opts.onError) === null || _opts$onError === void 0 ? void 0 : _opts$onError.call(opts, { ...o,
          req: event
        });
      }

    });
    const resp = {
      statusCode: response.status,
      body: (_response$body = response.body) !== null && _response$body !== void 0 ? _response$body : '',
      headers: transformHeaders((_response$headers = response.headers) !== null && _response$headers !== void 0 ? _response$headers : {})
    };
    return resp;
  };
}

exports.createApiGatewayHandler = createApiGatewayHandler;
